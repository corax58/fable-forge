// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Story {
  id             String   @id @default(cuid())
  title          String
  description    String   @db.Text
  imageUrl       String?
  primaryColor   String?
  secondaryColor String?
  nodes          Node[]
  status         Status   @default(InProgress)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

enum Status {
  InProgress
  Completed
}

model Node {
  id             String  @id @default(cuid())
  title          String
  text           String? @db.Text
  imageLink      String?
  story          Story   @relation(fields: [storyId], references: [id])
  storyId        String
  firstNode      Boolean @default(false)
  previousNodeId String?
  previousNode   Node?   @relation("NodeRelation", fields: [previousNodeId], references: [id], onDelete: Cascade)
  nextNodes      Node[]  @relation("NodeRelation")
}

model User {
  id               String    @id
  name             String
  email            String
  emailVerified    Boolean
  image            String?
  createdAt        DateTime
  updatedAt        DateTime
  twoFactorEnabled Boolean?
  username         String?
  sessions         Session[]
  accounts         Account[]

  @@unique([email])
  @@unique([username])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
