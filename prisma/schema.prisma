// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Story {
  id             String   @id @default(cuid())
  title          String
  description    String?  @db.Text
  imageUrl       String?
  primaryColor   String?
  secondaryColor String?
  status         Status   @default(InProgress)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

enum Status {
  InProgress
  Completed
}

model Node {
  id        String  @id @default(cuid())
  title     String
  text      String? @db.Text
  imageLink String?

  // previousId String?     // Reference to the previous node's ID (optional)

  // // Relation to the previous node (self-relation)
  // previous   Node?    @relation("PreviousRelation", fields: [previousId], references: [id])

  // // Reverse relation for the 'previous' field (nodes where this node is the previous)
  // previousNodes Node[] @relation("PreviousRelation")

  // Relation to the next nodes (self-relation)
  nextNodes Node[] @relation("NextRelation")

  // Reverse relation for the 'nextNodes' field
  nextOf Node[] @relation("NextRelation")
}
